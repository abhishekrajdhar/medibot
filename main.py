# Import required libraries
from fastapi import FastAPI, Request
from pydantic import BaseModel
import google.generativeai as genai
import google.api_core.exceptions
import uvicorn
from fastapi.middleware.cors import CORSMiddleware

# Initialize API key for Gemini
genai.configure(api_key="AIzaSyCnCxtKRmRxp9DOQcDi0htWHtj19mCJjpY")  # Replace with secure storage method in production

# FastAPI app instance
app = FastAPI(title="MediBot AI Chat API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["my-medic.vercel.app"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Request model for input validation
class ChatRequest(BaseModel):
    message: str

# Response model
class ChatResponse(BaseModel):
    response: str
    disclaimer: str = "This response is generated by an AI and should not be considered medical advice. Please consult a licensed medical professional."

# Prompt template to guide medical responses
MEDICAL_CONTEXT_PROMPT = (
    "You are a helpful and knowledgeable medical assistant. "
    "Provide accurate, concise, and respectful answers based on medical knowledge up to 2024. "
    "Avoid diagnosing conditions or offering treatment plans. "
    "Always encourage users to consult licensed healthcare professionals for medical decisions.\n\n"
    "User Query: {user_message}\n"
    "AI Response:"
)

# API endpoint for medical chat
@app.post("/medical-chat", response_model=ChatResponse)
async def chat_with_medical_ai(chat_request: ChatRequest):
    user_message = chat_request.message.strip()
    
    if not user_message:
        return {"response": "Please provide a valid medical question or query.", "disclaimer": ChatResponse.__fields__["disclaimer"].default}

    try:
        model = genai.GenerativeModel("gemini-1.5-pro-latest")
        # Insert the user message into the medical prompt context
        formatted_prompt = MEDICAL_CONTEXT_PROMPT.format(user_message=user_message)
        response = model.generate_content(formatted_prompt)
        bot_reply = response.text.strip()
    except google.api_core.exceptions.GoogleAPIError:
        bot_reply = "Apologies, I am experiencing issues processing your request. Please try again later."

    return {"response": bot_reply, "disclaimer": ChatResponse.__fields__["disclaimer"].default}

# Run the app (optional if running via command line)
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001)
